{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport avatar from \"../Components/Profile/img/avatar.jpg\";\nimport axios from \"../Dall/axios-instance\";\nimport { profileService } from \"../Dall/profile-service\";\nvar initialStateForProfile = {\n  aboutMe: \"Информация не указана\",\n  contacts: {},\n  photos: {\n    small: null,\n    large: avatar\n  },\n  status: \"У вас нет статуса\",\n  lookingForAJob: false,\n  lookingForAJobDescription: 'Ищу работу, знаю это это и это',\n  fullName: null,\n  statusChangeFlag: false,\n  currentStatus: \"\",\n  redProfileError: null\n};\nvar SET_STATUS = 'NETWORK/PROFILE/SET_STATUS';\nvar GET_PROFILE_INFORMATION = 'NETWORK/PROFILE/GET_PROFILE_INFORMATION';\nvar CHANGE_STATUS = 'NETWORK/PROFILE/CHANGE_STATUS';\nvar EDIT_DATA = 'NETWORK/PROFILE/EDIT_DATA';\nvar EDIT_ERRORS = 'NETWORK/PROFILE/EDIT_DATA/EDIT_ERRORS';\nvar ADD_CURRENT_STATUS_TEXT = 'NETWORK/PROFILE/ADD_CURRENT_STATUS_TEXT';\n\nvar profilePageReducer = function profilePageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateForProfile;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var stateCopy = _objectSpread({}, state);\n\n  stateCopy.contacts = _objectSpread({}, state.contacts);\n\n  switch (action.type) {\n    case SET_STATUS:\n      stateCopy.status = action.status;\n      stateCopy.currentStatus = action.status;\n      return stateCopy;\n\n    case CHANGE_STATUS:\n      stateCopy.statusChangeFlag = action.flag;\n      return stateCopy;\n\n    case ADD_CURRENT_STATUS_TEXT:\n      stateCopy.currentStatus = action.textareaObject.target.value;\n      return stateCopy;\n\n    case GET_PROFILE_INFORMATION:\n      stateCopy.aboutMe = action.data.aboutMe;\n      stateCopy.contacts = _objectSpread({}, action.data.contacts);\n      stateCopy.contacts.github = action.data.contacts.github;\n      stateCopy.lookingForAJob = action.data.lookingForAJob;\n      stateCopy.fullName = action.data.fullName;\n      stateCopy.lookingForAJobDescription = action.data.lookingForAJobDescription; //дописать, чтобы все бралось из сервера и записывалось в мой стейт\n\n      return stateCopy;\n\n    case EDIT_DATA:\n      console.log(action.newData);\n      stateCopy.contacts.skype = action.newData.redSkype;\n      return stateCopy;\n\n    case EDIT_ERRORS:\n      stateCopy.contacts.redProfileError = action.errors;\n      return stateCopy;\n\n    default:\n      return state;\n  }\n}; //Thunks\n\n\nexport var getStatusThunk = function getStatusThunk() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var userId = state.auth.userInfo.userId;\n    axios.get(\"profile/status/\".concat(userId)).then(function (result) {\n      dispatch(setStatus(result.data));\n    });\n  };\n};\nexport var addNewStatusThunk = function addNewStatusThunk() {\n  return function (dispatch, getState) {\n    var state = getState();\n    axios.put('profile/status', {\n      status: state.profileData.currentStatus\n    }).then(function () {\n      dispatch(changeStatusCreator(false));\n      dispatch(getStatusThunk());\n    });\n  };\n};\nexport var getProfileInformationThunk = function getProfileInformationThunk() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var state, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = getState();\n                _context.next = 3;\n                return profileService.getProfileInformation(state.auth.userInfo.userId);\n\n              case 3:\n                data = _context.sent;\n                dispatch(getProfileInformationCreator(data));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var editProfileDataThunk = function editProfileDataThunk(newData) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var state, result, errors;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = getState();\n                _context2.next = 3;\n                return profileService.editNewProfileData(newData);\n\n              case 3:\n                result = _context2.sent;\n\n                //сначало отправляются данные из формы на сервер\n                //а здесь уже диспатчим в стейт если все успешно отправилось\n                if (result.data.resultCode === 0) {\n                  //диспатчим данные в наш стейт\n                  dispatch(editProfileDataCreator(newData));\n                } else {\n                  errors = result.data.messages;\n                  console.log(result.data);\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //action creators\n\nvar editRedProfileErrorCreator = function editRedProfileErrorCreator(errors) {\n  return {\n    type: EDIT_ERRORS,\n    errors: errors\n  };\n};\n\nvar editProfileDataCreator = function editProfileDataCreator(newData) {\n  return {\n    type: EDIT_DATA,\n    newData: newData\n  };\n};\n\nvar setStatus = function setStatus(statusFromServer) {\n  return {\n    type: SET_STATUS,\n    status: statusFromServer\n  };\n};\n\nexport var changeStatusCreator = function changeStatusCreator(flag) {\n  return {\n    type: CHANGE_STATUS,\n    flag: flag\n  };\n};\nexport var addCurrentStatusTextCreator = function addCurrentStatusTextCreator(e) {\n  return {\n    type: ADD_CURRENT_STATUS_TEXT,\n    textareaObject: e\n  };\n};\n\nvar getProfileInformationCreator = function getProfileInformationCreator(dataFromServer) {\n  return {\n    type: GET_PROFILE_INFORMATION,\n    data: dataFromServer\n  };\n};\n\nexport default profilePageReducer;","map":{"version":3,"sources":["C:\\lessons\\React\\kmb-11\\src\\Reducers\\profilePageReducer.js"],"names":["React","avatar","axios","profileService","initialStateForProfile","aboutMe","contacts","photos","small","large","status","lookingForAJob","lookingForAJobDescription","fullName","statusChangeFlag","currentStatus","redProfileError","SET_STATUS","GET_PROFILE_INFORMATION","CHANGE_STATUS","EDIT_DATA","EDIT_ERRORS","ADD_CURRENT_STATUS_TEXT","profilePageReducer","state","action","stateCopy","type","flag","textareaObject","target","value","data","github","console","log","newData","skype","redSkype","errors","getStatusThunk","dispatch","getState","userId","auth","userInfo","get","then","result","setStatus","addNewStatusThunk","put","profileData","changeStatusCreator","getProfileInformationThunk","getProfileInformation","getProfileInformationCreator","editProfileDataThunk","editNewProfileData","resultCode","editProfileDataCreator","messages","editRedProfileErrorCreator","statusFromServer","addCurrentStatusTextCreator","e","dataFromServer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport avatar from \"../Components/Profile/img/avatar.jpg\";\nimport axios from \"../Dall/axios-instance\";\nimport {profileService} from \"../Dall/profile-service\";\n\nlet initialStateForProfile = {\n    aboutMe: \"Информация не указана\",\n    contacts: {},\n    photos: {\n        small: null,\n        large: avatar\n    },\n    status: \"У вас нет статуса\",\n    lookingForAJob: false,\n    lookingForAJobDescription: 'Ищу работу, знаю это это и это',\n    fullName: null,\n    statusChangeFlag: false,\n    currentStatus: \"\",\n    redProfileError: null\n};\n\nconst SET_STATUS = 'NETWORK/PROFILE/SET_STATUS';\nconst GET_PROFILE_INFORMATION = 'NETWORK/PROFILE/GET_PROFILE_INFORMATION';\nconst CHANGE_STATUS = 'NETWORK/PROFILE/CHANGE_STATUS';\nconst EDIT_DATA = 'NETWORK/PROFILE/EDIT_DATA';\nconst EDIT_ERRORS = 'NETWORK/PROFILE/EDIT_DATA/EDIT_ERRORS';\nconst ADD_CURRENT_STATUS_TEXT = 'NETWORK/PROFILE/ADD_CURRENT_STATUS_TEXT';\n\nconst profilePageReducer = (state = initialStateForProfile, action) => {\n    let stateCopy = {...state};\n    stateCopy.contacts = {...state.contacts};\n    switch (action.type) {\n        case SET_STATUS:\n            stateCopy.status = action.status\n            stateCopy.currentStatus = action.status\n            return stateCopy\n        case CHANGE_STATUS:\n            stateCopy.statusChangeFlag = action.flag\n            return stateCopy\n        case ADD_CURRENT_STATUS_TEXT:\n            stateCopy.currentStatus = action.textareaObject.target.value\n            return stateCopy\n        case GET_PROFILE_INFORMATION:\n            stateCopy.aboutMe = action.data.aboutMe\n            stateCopy.contacts = {...action.data.contacts}\n            stateCopy.contacts.github = action.data.contacts.github\n            stateCopy.lookingForAJob = action.data.lookingForAJob\n            stateCopy.fullName = action.data.fullName\n            stateCopy.lookingForAJobDescription = action.data.lookingForAJobDescription\n            //дописать, чтобы все бралось из сервера и записывалось в мой стейт\n            return stateCopy\n        case EDIT_DATA:\n            console.log(action.newData)\n            stateCopy.contacts.skype = action.newData.redSkype\n            return stateCopy\n        case EDIT_ERRORS:\n            stateCopy.contacts.redProfileError = action.errors\n            return stateCopy\n        default:\n            return state;\n    }\n};\n\n//Thunks\n\nexport const getStatusThunk = () => {\n    return (dispatch, getState) => {\n        let state = getState();\n                let userId = state.auth.userInfo.userId;\n                axios.get(`profile/status/${userId}`).then(\n                    result => {\n                        dispatch(setStatus(result.data));\n                    }\n                )\n    }\n}\n\nexport const addNewStatusThunk = () => {\n    return (dispatch, getState) => {\n        let state = getState();\n        axios.put('profile/status', {status: state.profileData.currentStatus}).then(\n            () => {\n                dispatch(changeStatusCreator(false));\n                dispatch(getStatusThunk())\n            }\n        );\n    }\n}\n\nexport const getProfileInformationThunk = () => {\n    return async (dispatch, getState) => {\n        let state = getState()\n        let data = await profileService.getProfileInformation(state.auth.userInfo.userId)\n        dispatch(getProfileInformationCreator((data)))\n    }\n}\n\nexport const editProfileDataThunk = (newData) => {\n    return async (dispatch, getState) => {\n        let state = getState()\n        let result = await profileService.editNewProfileData(newData) //сначало отправляются данные из формы на сервер\n        //а здесь уже диспатчим в стейт если все успешно отправилось\n        if(result.data.resultCode === 0) {\n            //диспатчим данные в наш стейт\n            dispatch(editProfileDataCreator(newData))\n        } else {\n            let errors = result.data.messages;\n            console.log(result.data)\n        }\n\n    }\n}\n\n//action creators\nconst editRedProfileErrorCreator = (errors) => {\n    return {\n        type: EDIT_ERRORS,\n        errors\n    }\n}\n\nconst editProfileDataCreator = (newData) => {\n    return {\n        type: EDIT_DATA,\n        newData\n    }\n}\n\nconst setStatus = (statusFromServer) => {\n    return {\n        type: SET_STATUS,\n        status: statusFromServer\n    }\n}\n\nexport const changeStatusCreator = (flag) => ({\n    type: CHANGE_STATUS,\n    flag: flag\n})\n\nexport const addCurrentStatusTextCreator = (e) => ({\n    type: ADD_CURRENT_STATUS_TEXT,\n    textareaObject: e\n})\n\nconst getProfileInformationCreator = (dataFromServer) => {\n    return {\n        type: GET_PROFILE_INFORMATION,\n        data: dataFromServer\n    }\n}\n\nexport default profilePageReducer;\n"]},"metadata":{},"sourceType":"module"}