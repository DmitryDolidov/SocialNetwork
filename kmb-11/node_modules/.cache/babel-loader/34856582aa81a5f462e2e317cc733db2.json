{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\lessons\\\\React\\\\kmb-11\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport { getOneFriendInformation, getOneFriendStatus } from \"../Dall/oneFriends-service\";\nvar initialState = {\n  fullName: null,\n  userId: null,\n  status: null,\n  photos: {\n    large: 'http://onapi.gob.do/images/avatar.png',\n    small: 'http://onapi.gob.do/images/avatar.png'\n  },\n  contacts: {\n    facebook: \"не заполнено\",\n    github: \"не заполнено\",\n    instagram: \"не заполнено\",\n    mainLink: \"не заполнено\",\n    twitter: \"не заполнено\",\n    vk: \"не заполнено\",\n    website: \"не заполнено\",\n    youtube: \"не заполнено\"\n  },\n  aboutMe: \"не заполнено\",\n  lookingForAJob: false,\n  lookingForAJobDescription: \"не заполнено\"\n};\nvar GET_FRIEND_INFORMATION = 'NETWORK/ONE_FRIEND/GET_FRIEND_INFORMATION';\nexport var oneFriendReducer = function oneFriendReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  var stateCopy = _objectSpread({}, state);\n\n  switch (action.type) {\n    case GET_FRIEND_INFORMATION:\n      stateCopy.fullName = action.newInformation.fullName;\n      stateCopy.status = action.newStatus;\n      stateCopy.userId = action.newInformation.userId;\n      stateCopy.photos = _objectSpread({}, action.newInformation.photos);\n      stateCopy.contacts = _objectSpread({}, action.newInformation.contacts);\n      stateCopy.aboutMe = action.newInformation.aboutMe;\n      stateCopy.lookingForAJob = action.newInformation.lookingForAJob;\n      stateCopy.lookingForAJobDescription = action.newInformation.lookingForAJobDescription;\n      return stateCopy;\n\n    default:\n      return state;\n  }\n};\nexport var getOneFriendThunk = function getOneFriendThunk(friendId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var newInformation, newStatus;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getOneFriendInformation(friendId);\n\n              case 2:\n                newInformation = _context.sent;\n                _context.next = 5;\n                return getOneFriendStatus(friendId);\n\n              case 5:\n                newStatus = _context.sent;\n                dispatch(getInformationCreator(newInformation, newStatus));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar getInformationCreator = function getInformationCreator(newInformation, newStatus) {\n  return {\n    type: GET_FRIEND_INFORMATION,\n    newInformation: newInformation,\n    newStatus: newStatus\n  };\n};","map":{"version":3,"sources":["C:\\lessons\\React\\kmb-11\\src\\Reducers\\oneFriendReducer.js"],"names":["React","getOneFriendInformation","getOneFriendStatus","initialState","fullName","userId","status","photos","large","small","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","aboutMe","lookingForAJob","lookingForAJobDescription","GET_FRIEND_INFORMATION","oneFriendReducer","state","action","stateCopy","type","newInformation","newStatus","getOneFriendThunk","friendId","dispatch","getState","getInformationCreator"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,uBAAR,EAAiCC,kBAAjC,QAA0D,4BAA1D;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,IADK;AAEfC,EAAAA,MAAM,EAAE,IAFO;AAGfC,EAAAA,MAAM,EAAE,IAHO;AAIfC,EAAAA,MAAM,EAAE;AACJC,IAAAA,KAAK,EAAE,uCADH;AAEJC,IAAAA,KAAK,EAAE;AAFH,GAJO;AAQfC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,cADJ;AAENC,IAAAA,MAAM,EAAE,cAFF;AAGNC,IAAAA,SAAS,EAAE,cAHL;AAINC,IAAAA,QAAQ,EAAE,cAJJ;AAKNC,IAAAA,OAAO,EAAE,cALH;AAMNC,IAAAA,EAAE,EAAE,cANE;AAONC,IAAAA,OAAO,EAAE,cAPH;AAQNC,IAAAA,OAAO,EAAE;AARH,GARK;AAkBfC,EAAAA,OAAO,EAAE,cAlBM;AAmBfC,EAAAA,cAAc,EAAE,KAnBD;AAoBfC,EAAAA,yBAAyB,EAAE;AApBZ,CAAnB;AAuBA,IAAMC,sBAAsB,GAAG,2CAA/B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBrB,YAAyB;AAAA,MAAXsB,MAAW;;AAC9D,MAAIC,SAAS,qBAAOF,KAAP,CAAb;;AACA,UAAQC,MAAM,CAACE,IAAf;AACI,SAAKL,sBAAL;AACII,MAAAA,SAAS,CAACtB,QAAV,GAAqBqB,MAAM,CAACG,cAAP,CAAsBxB,QAA3C;AACAsB,MAAAA,SAAS,CAACpB,MAAV,GAAmBmB,MAAM,CAACI,SAA1B;AACAH,MAAAA,SAAS,CAACrB,MAAV,GAAmBoB,MAAM,CAACG,cAAP,CAAsBvB,MAAzC;AACAqB,MAAAA,SAAS,CAACnB,MAAV,qBAAuBkB,MAAM,CAACG,cAAP,CAAsBrB,MAA7C;AACAmB,MAAAA,SAAS,CAAChB,QAAV,qBAAyBe,MAAM,CAACG,cAAP,CAAsBlB,QAA/C;AACAgB,MAAAA,SAAS,CAACP,OAAV,GAAoBM,MAAM,CAACG,cAAP,CAAsBT,OAA1C;AACAO,MAAAA,SAAS,CAACN,cAAV,GAA2BK,MAAM,CAACG,cAAP,CAAsBR,cAAjD;AACAM,MAAAA,SAAS,CAACL,yBAAV,GAAsCI,MAAM,CAACG,cAAP,CAAsBP,yBAA5D;AACA,aAAOK,SAAP;;AACJ;AACI,aAAOF,KAAP;AAZR;AAcH,CAhBM;AAkBP,OAAO,IAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwBhC,uBAAuB,CAAC8B,QAAD,CAD/C;;AAAA;AACCH,gBAAAA,cADD;AAAA;AAAA,uBAEmB1B,kBAAkB,CAAC6B,QAAD,CAFrC;;AAAA;AAECF,gBAAAA,SAFD;AAGHG,gBAAAA,QAAQ,CAACE,qBAAqB,CAACN,cAAD,EAAiBC,SAAjB,CAAtB,CAAR;;AAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKH,CANM;;AAQP,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACN,cAAD,EAAiBC,SAAjB,EAA+B;AACzD,SAAO;AACHF,IAAAA,IAAI,EAAEL,sBADH;AAEHM,IAAAA,cAAc,EAAdA,cAFG;AAGHC,IAAAA,SAAS,EAATA;AAHG,GAAP;AAKH,CAND","sourcesContent":["import React from 'react';\r\nimport {getOneFriendInformation, getOneFriendStatus} from \"../Dall/oneFriends-service\";\r\n\r\nlet initialState = {\r\n    fullName: null,\r\n    userId: null,\r\n    status: null,\r\n    photos: {\r\n        large: 'http://onapi.gob.do/images/avatar.png',\r\n        small: 'http://onapi.gob.do/images/avatar.png'\r\n    },\r\n    contacts: {\r\n        facebook: \"не заполнено\",\r\n        github: \"не заполнено\",\r\n        instagram: \"не заполнено\",\r\n        mainLink: \"не заполнено\",\r\n        twitter: \"не заполнено\",\r\n        vk: \"не заполнено\",\r\n        website: \"не заполнено\",\r\n        youtube: \"не заполнено\"\r\n    },\r\n    aboutMe: \"не заполнено\",\r\n    lookingForAJob: false,\r\n    lookingForAJobDescription: \"не заполнено\",\r\n}\r\n\r\nconst GET_FRIEND_INFORMATION = 'NETWORK/ONE_FRIEND/GET_FRIEND_INFORMATION'\r\n\r\nexport const oneFriendReducer = (state = initialState, action) => {\r\n    let stateCopy = {...state}\r\n    switch (action.type) {\r\n        case GET_FRIEND_INFORMATION:\r\n            stateCopy.fullName = action.newInformation.fullName\r\n            stateCopy.status = action.newStatus\r\n            stateCopy.userId = action.newInformation.userId\r\n            stateCopy.photos = {...action.newInformation.photos}\r\n            stateCopy.contacts = {...action.newInformation.contacts}\r\n            stateCopy.aboutMe = action.newInformation.aboutMe\r\n            stateCopy.lookingForAJob = action.newInformation.lookingForAJob\r\n            stateCopy.lookingForAJobDescription = action.newInformation.lookingForAJobDescription\r\n            return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getOneFriendThunk = (friendId) => {\r\n    return async (dispatch, getState)=> {\r\n        let newInformation = await getOneFriendInformation(friendId)\r\n        let newStatus = await getOneFriendStatus(friendId)\r\n        dispatch(getInformationCreator(newInformation, newStatus))\r\n    }\r\n}\r\n\r\nconst getInformationCreator = (newInformation, newStatus) => {\r\n    return {\r\n        type: GET_FRIEND_INFORMATION,\r\n        newInformation,\r\n        newStatus\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}