{"ast":null,"code":"var _jsxFileName = \"C:\\\\lessons\\\\React\\\\kmb-11\\\\src\\\\Components\\\\Dialogs\\\\Dialogs.js\";\nimport React from 'react';\nimport './Dialogs.css';\nimport Correspondent from \"./CorrespondentComponent\";\nimport { connect } from 'react-redux';\nimport { Route } from \"react-router\";\nimport DialogsMessage from \"./DialogsMessage\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport DefaultDialogsMessage from \"./DefaultDialogsMessage\";\nimport { chooseDialogOnClickDispatch, chooseDialogOnUrlDispatch } from \"../../Reducers/dialogPageReducer\";\n\nvar Dialogs = function Dialogs(props) {\n  var returnMessages = '';\n\n  if (props.currentCorresspondentId) {\n    returnMessages = props.dialogMessages[props.currentCorresspondentId].map(function (el) {\n      return React.createElement(DialogsMessage, {\n        avatar: props.dialogCorrespondents[el.id].avatar,\n        name: props.dialogCorrespondents[el.id].firstName,\n        message: el.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      });\n    });\n  } else {\n    returnMessages = React.createElement(DefaultDialogsMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    });\n  }\n\n  var returnDialogCorrespondents = props.dialogCorrespondents.map(function (el) {\n    if (el.id !== 0) {\n      return React.createElement(NavLink, {\n        to: \"/dialogs/\".concat(el.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Correspondent, {\n        avatar: el.avatar,\n        name: el.firstName,\n        chooseDialog: props.chooseDialogOnClick,\n        currentCorresspondentId: props.match.params.userId,\n        correspondentId: el.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n    }\n  });\n  return React.createElement(\"div\", {\n    className: 'dialogs-box',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: 'dialogs-titul',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"\\u0414\\u0438\\u0430\\u043B\\u043E\\u0433\\u0438\"), React.createElement(\"div\", {\n    className: \"dialogs-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"dialogs-users\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, returnDialogCorrespondents), React.createElement(\"div\", {\n    className: \"dialogs-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: '/dialogs/:userId?',\n    render: function render() {\n      return returnMessages;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dialogCorrespondents: state.dialogData.dialogCorrespondents,\n    currentCorresspondentId: state.dialogData.currentCorresspondentId,\n    dialogMessages: state.dialogData.dialogMessages\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    chooseDialogOnClick: function chooseDialogOnClick(corresspondentId) {\n      dispatch(chooseDialogOnClickDispatch(corresspondentId));\n    },\n    chooseDialogOnUrl: function chooseDialogOnUrl(corresspondentId) {\n      dispatch(chooseDialogOnUrlDispatch(corresspondentId));\n    }\n  };\n};\n\nvar ConnectedDialog = withRouter(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\nexport default ConnectedDialog;","map":{"version":3,"sources":["C:\\lessons\\React\\kmb-11\\src\\Components\\Dialogs\\Dialogs.js"],"names":["React","Correspondent","connect","Route","DialogsMessage","NavLink","withRouter","DefaultDialogsMessage","chooseDialogOnClickDispatch","chooseDialogOnUrlDispatch","Dialogs","props","returnMessages","currentCorresspondentId","dialogMessages","map","el","dialogCorrespondents","id","avatar","firstName","message","returnDialogCorrespondents","chooseDialogOnClick","match","params","userId","mapStateToProps","state","dialogData","mapDispatchToProps","dispatch","corresspondentId","chooseDialogOnUrl","ConnectedDialog"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Dialogs.css';\nimport Correspondent from \"./CorrespondentComponent\";\nimport {connect} from 'react-redux';\nimport {Route} from \"react-router\";\nimport DialogsMessage from \"./DialogsMessage\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport DefaultDialogsMessage from \"./DefaultDialogsMessage\";\nimport {chooseDialogOnClickDispatch, chooseDialogOnUrlDispatch} from \"../../Reducers/dialogPageReducer\";\n\nconst Dialogs = (props) => {\n\n    let returnMessages = '';\n\n\n    if (props.currentCorresspondentId) {\n        returnMessages = props.dialogMessages[props.currentCorresspondentId].map((el) => {\n            return (<DialogsMessage avatar={props.dialogCorrespondents[el.id].avatar}\n                                    name={props.dialogCorrespondents[el.id].firstName} message={el.message}/>);\n        });\n    } else {\n        returnMessages = <DefaultDialogsMessage/>;\n    }\n    let returnDialogCorrespondents = props.dialogCorrespondents.map((el) => {\n        if (el.id !== 0) {\n            return (<NavLink to={`/dialogs/${el.id}`}><Correspondent\n                avatar={el.avatar} name={el.firstName} chooseDialog={props.chooseDialogOnClick}\n                currentCorresspondentId={props.match.params.userId}\n                correspondentId={el.id}/>\n            </NavLink>)\n        }\n    });\n\n    return (\n        <div className={'dialogs-box'}>\n            <div className={'dialogs-titul'}>\n                Диалоги\n            </div>\n            <div className={\"dialogs-content\"}>\n                <div className={\"dialogs-users\"}>\n                    {returnDialogCorrespondents}\n                </div>\n                <div className={\"dialogs-messages\"}>\n                    <Route path={'/dialogs/:userId?'} render={() => returnMessages}/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        dialogCorrespondents: state.dialogData.dialogCorrespondents,\n        currentCorresspondentId: state.dialogData.currentCorresspondentId,\n        dialogMessages: state.dialogData.dialogMessages\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        chooseDialogOnClick: (corresspondentId) => {\n            dispatch(\n                chooseDialogOnClickDispatch(corresspondentId)\n            );\n        },\n        chooseDialogOnUrl: (corresspondentId) => {\n            dispatch(\n                chooseDialogOnUrlDispatch(corresspondentId)\n            );\n        }\n    }\n};\n\nconst ConnectedDialog = withRouter(connect(mapStateToProps, mapDispatchToProps)(Dialogs));\n\nexport default ConnectedDialog;"]},"metadata":{},"sourceType":"module"}